create table public.users (
  user_id integer generated by default as identity not null,
  auth_id uuid null,
  first_name text not null,
  last_name text not null,
  email text not null,
  phone_number text not null,
  user_type public.user_type not null,
  profile_picture text null,
  birth_date date null,
  price_range text null,
  room_preference text null,
  occupation text null,
  place_of_work_study text null,
  rented_property integer null,
  is_warned boolean not null default false,
  is_banned boolean not null default false,
  is_verified boolean not null default false,
  account_created_date date null,
  last_login_date timestamp without time zone null,
  constraint users_pkey primary key (user_id),
  constraint users_auth_id_key unique (auth_id),
  constraint users_email_key unique (email),
  constraint users_phone_number_key unique (phone_number),
  constraint fk_users_rented_property foreign KEY (rented_property) references properties (property_id) on update CASCADE on delete set null
) TABLESPACE pg_default;

create trigger trigger_user_warned
after
update on users for EACH row
execute FUNCTION notify_user_warned ();

create trigger trigger_user_verified
after
update on users for EACH row
execute FUNCTION notify_user_verified ();

create trigger trigger_rental_ended
after
update on users for EACH row
execute FUNCTION notify_rental_ended ();

create trigger trigger_new_registration
after INSERT on users for EACH row
execute FUNCTION notify_new_registration ();